$date
	Sat Apr 22 15:58:01 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module Seg7_Decoder_TB $end
$var wire 7 ! saida_tens [6:0] $end
$var wire 7 " saida_ones [6:0] $end
$var wire 7 # saida_mins [6:0] $end
$var reg 4 $ mins [3:0] $end
$var reg 4 % sec_ones [3:0] $end
$var reg 4 & sec_tens [3:0] $end
$scope module dut $end
$var wire 4 ' mins [3:0] $end
$var wire 4 ( sec_ones [3:0] $end
$var wire 4 ) sec_tens [3:0] $end
$var wire 7 * sec_tens_seg [6:0] $end
$var wire 7 + sec_ones_seg [6:0] $end
$var wire 7 , mins_seg [6:0] $end
$scope module Mins $end
$var wire 4 - entrada [3:0] $end
$var wire 7 . saida [6:0] $end
$upscope $end
$scope module Ones $end
$var wire 4 / entrada [3:0] $end
$var wire 7 0 saida [6:0] $end
$upscope $end
$scope module Tens $end
$var wire 4 1 entrada [3:0] $end
$var wire 7 2 saida [6:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b1111110 2
b0 1
b1111110 0
b0 /
b1111110 .
b0 -
b1111110 ,
b1111110 +
b1111110 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b1111110 #
b1111110 "
b1111110 !
$end
#1000
b110000 #
b110000 ,
b110000 .
b110000 !
b110000 *
b110000 2
b110000 "
b110000 +
b110000 0
b1 $
b1 '
b1 -
b1 &
b1 )
b1 1
b1 %
b1 (
b1 /
#2000
b1101101 #
b1101101 ,
b1101101 .
b1101101 !
b1101101 *
b1101101 2
b1101101 "
b1101101 +
b1101101 0
b10 $
b10 '
b10 -
b10 &
b10 )
b10 1
b10 %
b10 (
b10 /
#3000
b1111001 #
b1111001 ,
b1111001 .
b1111001 !
b1111001 *
b1111001 2
b1111001 "
b1111001 +
b1111001 0
b11 $
b11 '
b11 -
b11 &
b11 )
b11 1
b11 %
b11 (
b11 /
#4000
b110011 #
b110011 ,
b110011 .
b110011 !
b110011 *
b110011 2
b110011 "
b110011 +
b110011 0
b100 $
b100 '
b100 -
b100 &
b100 )
b100 1
b100 %
b100 (
b100 /
#5000
b1011011 #
b1011011 ,
b1011011 .
b1011011 !
b1011011 *
b1011011 2
b1011011 "
b1011011 +
b1011011 0
b101 $
b101 '
b101 -
b101 &
b101 )
b101 1
b101 %
b101 (
b101 /
#6000
b11111 #
b11111 ,
b11111 .
b11111 !
b11111 *
b11111 2
b11111 "
b11111 +
b11111 0
b110 $
b110 '
b110 -
b110 &
b110 )
b110 1
b110 %
b110 (
b110 /
#7000
b1110000 #
b1110000 ,
b1110000 .
b1110000 !
b1110000 *
b1110000 2
b1110000 "
b1110000 +
b1110000 0
b111 $
b111 '
b111 -
b111 &
b111 )
b111 1
b111 %
b111 (
b111 /
#8000
b1111111 #
b1111111 ,
b1111111 .
b1111111 !
b1111111 *
b1111111 2
b1111111 "
b1111111 +
b1111111 0
b1000 $
b1000 '
b1000 -
b1000 &
b1000 )
b1000 1
b1000 %
b1000 (
b1000 /
#9000
b1110011 #
b1110011 ,
b1110011 .
b1110011 !
b1110011 *
b1110011 2
b1110011 "
b1110011 +
b1110011 0
b1001 $
b1001 '
b1001 -
b1001 &
b1001 )
b1001 1
b1001 %
b1001 (
b1001 /
#10000
b0 #
b0 ,
b0 .
b0 !
b0 *
b0 2
b0 "
b0 +
b0 0
b1010 $
b1010 '
b1010 -
b1010 &
b1010 )
b1010 1
b1010 %
b1010 (
b1010 /
#11000
